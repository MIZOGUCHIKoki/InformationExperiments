	.include	"common.h"
	.section 	.init
	.global 	_start
_start:
	mov	sp,		#STACK					@ clear stack pointer
	ldr	r0,		=nb_all
	ldr	r1,		=frame_buffer
	mov	r11,	#0
	ldr	r5,		=nb_0
number:
	mov		r10,	#700
	mov		r2,		#7
	ldr		r3,		[r0,	r11,	lsl	#2]					@ r3 = nb_0's address r11 * 4(byte)

	multi:	@ struct string
		ldrb	r6,		[r5,	r2]
		lsl		r6,		#4
		ldrb	r4,		[r3,	r2]			@ r4 = nb_0[r2]		read only 1Byte
		orr		r7,		r4,	r6
		strb	r7,		[r1,	r2]			@ store
		subs	r2,		r2,		#1
		bpl		multi								@ 0以上
	dip:
		bl		display
		subs	r10,	r10,	#1
		bne		dip
	
	adds	r11,	r11,	#1	
	cmp		r11,	#10
	moveq	r11,	#0

	b	number
@	----- data base -----
nb_0:
	.byte	0x0,	0xe,	0xa,	0xa,	0xa,	0xe,	0x0,	0x0
nb_1:
	.byte	0x0,	0x4,	0xc,	0x4,	0x4,	0xe,	0x0,	0x0
nb_2:
	.byte	0x0,	0xe,	0x2,	0xe,	0x8,	0xe,	0x0,	0x0
nb_3:
	.byte	0x0,	0xe,	0x2,	0xe,	0x2,	0xe,	0x0,	0x0
nb_4:
	.byte	0x0,	0xa,	0xa,	0xe,	0x2,	0x2,	0x0,	0x0
nb_5:
	.byte	0x0,	0xe,	0x8,	0xe,	0x2,	0xe,	0x0,	0x0
nb_6:
	.byte	0x0,	0xe,	0x8,	0xe,	0xa,	0xe,	0x0,	0x0
nb_7:
	.byte	0x0,	0xe,	0xa,	0x2,	0x2,	0x2,	0x0,	0x0
nb_8:
	.byte	0x0,	0xe,	0xa,	0xe,	0xa,	0xe,	0x0,	0x0
nb_9:
	.byte	0x0,	0xe,	0xa,	0xe,	0x2,	0xe,	0x0,	0x0
nb_all:	
	.word	nb_0,	nb_1,	nb_2,	nb_3,	nb_4,	nb_5,	nb_6,	nb_7, nb_8,	nb_9
	@	4byte		nb_all + 0 = nb_0,	nb_all + 4 = nb_1
	@	nb_all + [byte] = ??

	.section	.data
	.global		frame_buffer
frame_buffer:
	.byte 0x00,	0x00,	0x00,	0x00,	0x00,	0x00,	0x00,	0x00
